package {{.PackageName}}

import (
  "fmt"
  {{if eq (is_contains_date .UniqueVariablesTypes) true -}}
  "time"
  {{end -}}
)

type MessageError struct {
  Code string
  Status Status // optional
  Message string
}

/* MessageError method */
func (this *MessageError) Error() string {
  return fmt.Sprintf("%v: %v", this.Code, this.Message)
}

/* enum: MessageError.Code */
const (
{{range .Messages -}}
  {{.Code | rename_code}} = "{{.Code}}"
{{end -}}
)

{{if ne (len .UniqueStatuses) 0 -}}
/* status type */
type Status string 

/* enum: MessageError.Status */
  const (
    {{range .UniqueStatuses -}}
      Status{{. | title_case | trim}} Status = "{{.}}"
    {{end -}}
  )
{{end -}}

{{range $obj := .Messages}}
  func Report{{$obj.Code | rename_code}}(
  {{range $k, $v := $obj.Variables -}}
    {{$k}} {{$v | rename_type}},
  {{end -}}
  ) (m *MessageError) {
     m = &MessageError{}
     m.Code = {{$obj.Code | rename_code}}
     {{$blank := is_blank $obj.Status -}}
     {{if eq $blank false -}}
      m.Status = Status{{$obj.Status | title_case | trim}}
     {{end -}}
    {{if eq (len $obj.Variables) 0 -}}
      switch currentLang {
        {{range $lang, $template := $obj.Templates -}}
          case Lang{{$lang | title_case}}:  
            m.Message = fmt.Sprintf("{{$template}}")
        {{end -}}
      }
    {{else -}}
      switch currentLang {
        {{range $lang, $template := $obj.Templates -}}
        {{$new_template := replace_placeholders $template $obj.Variables -}}
        {{$params := correct_placeholders $template $obj.Variables -}}
          case Lang{{$lang | title_case}}:  
          m.Message = fmt.Sprintf("{{$new_template}}", {{join $params ","}})
        {{end -}}
      }
    {{end -}}
    return
  }
{{end}}

