package {{.PackageName}}

{{if ne (len .Messages) 0 -}}
  import (
    "fmt"
    {{if eq (is_contains_date .UniqueVariablesTypes) true -}}
    "time"
    {{end -}}
  )
{{end -}}

type Message struct {
  Code string
  Message string
}

/* Message method */
func (this *Message) String() string {
  return fmt.Sprintf("%v: %v", this.Code, this.Message)
}

/* language type */
type Lang string

/* to store locally the current language used in app */
var currentLang Lang

/* to set the current language used in app */
func SetCurrentLang(language Lang) {
  currentLang = language
}

{{if ne (len .Messages) 0 -}}
  /* enum: Message.Code */
  const (
  {{range .Messages -}}
    {{.Code | rename_code}} = "{{.Code}}"
  {{end -}}
  )
{{end -}}

/* enum: Templates.{lang} */
const (
{{range .UniqueLangs -}}
  Lang{{. | title_case}} Lang = "{{.}}"
{{end -}}
)

{{range $obj := .Messages}}
  func Create{{$obj.Code | rename_code}}(
  {{range $k, $v := $obj.Variables -}}
    {{$k}} {{$v | rename_type}},
  {{end -}}
  ) (m *Message) {
     m = &Message{}
     m.Code = {{$obj.Code | rename_code}}
    {{if eq (len $obj.Variables) 0 -}}
      switch currentLang {
        {{range $lang, $template := $obj.Templates -}}
          case Lang{{$lang | title_case}}:  
            m.Message = fmt.Sprintf("{{$template}}")
        {{end -}}
      }
    {{else -}}
      switch currentLang {
        {{range $lang, $template := $obj.Templates -}}
        {{$new_template := replace_placeholders $template $obj.Variables -}}
        {{$params := correct_placeholders $template $obj.Variables -}}
          case Lang{{$lang | title_case}}:  
          m.Message = fmt.Sprintf("{{$new_template}}", {{join $params ","}})
        {{end -}}
      }
    {{end -}}
    return
  }
{{end}}

